// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/drive.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileProvider_UploadFile_FullMethodName   = "/file_provider.FileProvider/UploadFile"
	FileProvider_DownloadFile_FullMethodName = "/file_provider.FileProvider/DownloadFile"
	FileProvider_FetchFiles_FullMethodName   = "/file_provider.FileProvider/FetchFiles"
)

// FileProviderClient is the client API for FileProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProviderClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	FetchFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FetchFilesResponse, error)
}

type fileProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProviderClient(cc grpc.ClientConnInterface) FileProviderClient {
	return &fileProviderClient{cc}
}

func (c *fileProviderClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileProvider_ServiceDesc.Streams[0], FileProvider_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProvider_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *fileProviderClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileProvider_ServiceDesc.Streams[1], FileProvider_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProvider_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *fileProviderClient) FetchFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FetchFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchFilesResponse)
	err := c.cc.Invoke(ctx, FileProvider_FetchFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProviderServer is the server API for FileProvider service.
// All implementations must embed UnimplementedFileProviderServer
// for forward compatibility.
type FileProviderServer interface {
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	FetchFiles(context.Context, *emptypb.Empty) (*FetchFilesResponse, error)
	mustEmbedUnimplementedFileProviderServer()
}

// UnimplementedFileProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileProviderServer struct{}

func (UnimplementedFileProviderServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileProviderServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileProviderServer) FetchFiles(context.Context, *emptypb.Empty) (*FetchFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFiles not implemented")
}
func (UnimplementedFileProviderServer) mustEmbedUnimplementedFileProviderServer() {}
func (UnimplementedFileProviderServer) testEmbeddedByValue()                      {}

// UnsafeFileProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProviderServer will
// result in compilation errors.
type UnsafeFileProviderServer interface {
	mustEmbedUnimplementedFileProviderServer()
}

func RegisterFileProviderServer(s grpc.ServiceRegistrar, srv FileProviderServer) {
	// If the following call pancis, it indicates UnimplementedFileProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileProvider_ServiceDesc, srv)
}

func _FileProvider_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileProviderServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProvider_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _FileProvider_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileProviderServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProvider_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _FileProvider_FetchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProviderServer).FetchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileProvider_FetchFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProviderServer).FetchFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileProvider_ServiceDesc is the grpc.ServiceDesc for FileProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_provider.FileProvider",
	HandlerType: (*FileProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchFiles",
			Handler:    _FileProvider_FetchFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileProvider_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileProvider_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/drive.proto",
}
